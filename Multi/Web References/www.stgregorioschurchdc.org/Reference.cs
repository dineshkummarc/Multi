// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace Multi.www.stgregorioschurchdc.org {
    
    
    /// <remarks/>
    [System.Web.Services.WebServiceBinding(Name="BibleVersesSoapPort", Namespace="http://www.stgregorioschurchdc.org/Bible")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bible : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback read_bibleOperationCompleted;
        
        public Bible() {
            this.Url = "http://www.stgregorioschurchdc.org/cgi/websvcbible.cgi";
        }
        
        public Bible(string url) {
            this.Url = url;
        }
        
        public event read_bibleCompletedEventHandler read_bibleCompleted;
        
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.stgregorioschurchdc.org/Bible#read_bible", RequestNamespace="http://www.stgregorioschurchdc.org/Bible", ResponseNamespace="http://www.stgregorioschurchdc.org/Bible")]
        [return: System.Xml.Serialization.SoapElement("verses")]
        public string read_bible(string from) {
            object[] results = this.Invoke("read_bible", new object[] {
                        from});
            return ((string)(results[0]));
        }
        
        public System.IAsyncResult Beginread_bible(string from, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("read_bible", new object[] {
                        from}, callback, asyncState);
        }
        
        public string Endread_bible(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        public void read_bibleAsync(string from) {
            this.read_bibleAsync(from, null);
        }
        
        public void read_bibleAsync(string from, object userState) {
            if ((this.read_bibleOperationCompleted == null)) {
                this.read_bibleOperationCompleted = new System.Threading.SendOrPostCallback(this.Onread_bibleCompleted);
            }
            this.InvokeAsync("read_bible", new object[] {
                        from}, this.read_bibleOperationCompleted, userState);
        }
        
        private void Onread_bibleCompleted(object arg) {
            if ((this.read_bibleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.read_bibleCompleted(this, new read_bibleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
    }
    
    public partial class read_bibleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal read_bibleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public delegate void read_bibleCompletedEventHandler(object sender, read_bibleCompletedEventArgs args);
}
